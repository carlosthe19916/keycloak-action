# action.yml
name: 'Keycloak Admin CLI'
description: 'Executes Keycloak Admin CLI against a defined server.'
branding:
  icon: 'unlock'
  color: 'blue'
inputs:
  version:
    description: 'The version of the keycloak image client to use'
    required: false
    default: "latest"
  server:
    description: 'The server URL e.g. http://localhost:8080/auth'
    required: true
  username:
    description: 'The username to start a session.'
    required: true
  password:
    description: 'The password to start a session.'
    required: true
  realm:
    description: 'The realm to start a session against to (default master).'
    required: false
    default: master
  client:
    description: 'The client to start a session against to (default admin-cli).'
    required: false
    default: admin-cli
  server-wait-timeout:
    description: 'Time to wait until server is available.'
    required: false
    default: "120"
  kcadm:
    description: 'The commands to execute after authenticated in Keycloak e.g. update realms/rhamt -f rhamt-realm.json.'
    required: true
runs:
  using: composite
  steps:
    - name: Download Keycloak client
      shell: bash
      env:
        KEYCLOAK_IMG: quay.io/keycloak/keycloak:${{ inputs.version }}
      run: |
        mkdir -p /tmp/keycloak/bin
        major_version=$(("$(echo ${{ inputs.version }} | cut -d'.' -f1)"))        
        if (( major_version > 19 )); then
          docker cp $(docker create --name download $KEYCLOAK_IMG ls):/opt/keycloak/bin /tmp/keycloak/bin && docker rm download
        else
          docker cp $(docker create --name download $KEYCLOAK_IMG ls):/opt/jboss/keycloak/bin /tmp/keycloak/bin && docker rm download
        fi
    - name: Execute client
      shell: bash
      run: |
        attempt_counter=0

        interval=3
        max_attempts=$((${{ inputs.server-wait-timeout }}/interval));

        ## Wait until server is ready to continue
        echo "Waiting for ${{ inputs.server }}"
        until (curl --output /dev/null --silent --head --fail ${{ inputs.server }}); do
          if [ ${attempt_counter} -eq ${max_attempts} ];then
            echo "Max attempts reached"
            exit 1
          fi

          printf '.'
          attempt_counter=$(($attempt_counter+1))
          sleep $interval
        done

        ## Login
        /tmp/keycloak/bin/kcadm.sh config credentials \
        --server ${{ inputs.server }} \
        --user ${{ inputs.username }} \
        --password ${{ inputs.password }} \
        --realm ${{ inputs.realm }} \
        --client ${{ inputs.client }}

        ## remove empty strings and parse command lines
        readarray -t lines <<< "$(echo "${{ inputs.kcadm }}" | sed '/^$/d')"

        ## Execute kcadm.sh for each command line
        for l in "${lines[@]}";
        do
          echo "::debug title=command execution::Executing command $l"
          eval "/tmp/keycloak/bin/kcadm.sh $l";
        done






#  env:
#    KEYCLOAK_VERSION: ${{ inputs.version }}
#  args:
#    - ${{ inputs.server }}
#    - ${{ inputs.username }}
#    - ${{ inputs.password }}
#    - ${{ inputs.realm }}
#    - ${{ inputs.client }}
#    - ${{ inputs.server-wait-timeout }}
#    - ${{ inputs.kcadm }}
