# action.yml
name: 'Keycloak Admin CLI'
description: 'Executes Keycloak Admin CLI against a defined server.'
branding:
  icon: 'unlock'
  color: 'blue'
inputs:
  version:
    description: 'The version of the keycloak image client to use'
    required: false
    default: "latest"
  server:
    description: 'The server URL e.g. http://localhost:8080/auth'
    required: true
  username:
    description: 'The username to start a session.'
    required: true
  password:
    description: 'The password to start a session.'
    required: true
  realm:
    description: 'The realm to start a session against to (default master).'
    required: false
    default: master
  client:
    description: 'The client to start a session against to (default admin-cli).'
    required: false
    default: admin-cli
  server-wait-timeout:
    description: 'Time to wait until server is available.'
    required: false
    default: "120"
  kcadm:
    description: 'The commands to execute after authenticated in Keycloak e.g. update realms/rhamt -f rhamt-realm.json.'
    required: true
runs:
  using: composite
  steps:
    - name: Download Keycloak client
      shell: bash
      env:
        KEYCLOAK_VERSION: ${{ inputs.version }}
      run: |
        KEYCLOAK_IMG=quay.io/keycloak/keycloak:${KEYCLOAK_VERSION}

        KEYCLOAK_BIN_DIRECTORY="/opt/keycloak/bin"
        KEYCLOAK_LEGACY_BIN_DIRECTORY="/opt/jboss/keycloak/bin"

        BIN_DIRECTORY=""
        if [ ${KEYCLOAK_VERSION} = "latest" ]; then 
            BIN_DIRECTORY=${KEYCLOAK_BIN_DIRECTORY}
        else
            major_version=$(("$(echo $KEYCLOAK_VERSION | cut -d'.' -f1)"))        
            if (( major_version > 19 )); then
                BIN_DIRECTORY=${KEYCLOAK_BIN_DIRECTORY}
            else
                BIN_DIRECTORY=${KEYCLOAK_LEGACY_BIN_DIRECTORY}
            fi;
        fi;

        docker cp $(docker create --name download $KEYCLOAK_IMG ls):${BIN_DIRECTORY} /tmp/keycloak && docker rm download
        ls /tmp/keycloak
        
    - name: Execute client
      shell: bash
      env:
        SERVER_URL: ${{ inputs.server }}
        USERNAME: ${{ inputs.username }}
        PASSWORD: ${{ inputs.password }}
        REALM: ${{ inputs.realm }}
        CLIENT: ${{ inputs.client }}
        TIMEOUT: ${{ inputs.server-wait-timeout }}
        COMMAND: ${{ inputs.kcadm }}
      run: |
        attempt_counter=0
        interval=3
        max_attempts=$(($TIMEOUT/interval));

        ## Wait until server is ready to continue
        echo "Waiting for $SERVER_URL"
        until (curl --output /dev/null --silent --head --fail $SERVER_URL); do
          if [ ${attempt_counter} -eq ${max_attempts} ];then
            echo "Max attempts reached"
            exit 1
          fi

          printf '.'
          attempt_counter=$(($attempt_counter+1))
          sleep $interval
        done

        ## Login
        /tmp/keycloak/kcadm.sh config credentials \
        --server ${SERVER_URL} \
        --user ${USERNAME} \
        --password ${PASSWORD} \
        --realm ${REALM} \
        --client ${CLIENT}

    #     ## remove empty strings and parse command lines
    #     readarray -t lines <<< "$(echo "${{ inputs.kcadm }}" | sed '/^$/d')"

    #     ## Execute kcadm.sh for each command line
    #     for l in "${lines[@]}";
    #     do
    #       echo "::debug title=command execution::Executing command $l"
    #       eval "/tmp/keycloak/bin/kcadm.sh $l";
    #     done






#  env:
#    KEYCLOAK_VERSION: ${{ inputs.version }}
#  args:
#    - ${{ inputs.server }}
#    - ${{ inputs.username }}
#    - ${{ inputs.password }}
#    - ${{ inputs.realm }}
#    - ${{ inputs.client }}
#    - ${{ inputs.server-wait-timeout }}
#    - ${{ inputs.kcadm }}
